{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\CampusBite\\\\Desktop\\\\educhain\\\\frontend\\\\src\\\\contexts\\\\Web3Context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// contexts/Web3Context.js\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Web3Context = /*#__PURE__*/createContext();\nexport const useWeb3 = () => {\n  _s();\n  const context = useContext(Web3Context);\n  if (!context) {\n    throw new Error('useWeb3 must be used within a Web3Provider');\n  }\n  return context;\n};\n_s(useWeb3, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const Web3Provider = ({\n  children\n}) => {\n  _s2();\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [chainId, setChainId] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Base blockchain configuration\n  const BASE_CHAIN_ID = '0x2105'; // Base mainnet\n  const BASE_RPC_URL = 'https://mainnet.base.org';\n  useEffect(() => {\n    checkWalletConnection();\n    setupEventListeners();\n  }, []);\n  const checkWalletConnection = async () => {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_accounts'\n        });\n        if (accounts.length > 0) {\n          await connectWallet();\n        }\n      } catch (error) {\n        console.error('Error checking wallet connection:', error);\n      }\n    }\n  };\n  const setupEventListeners = () => {\n    if (typeof window.ethereum !== 'undefined') {\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n      window.ethereum.on('chainChanged', handleChainChanged);\n    }\n  };\n  const handleAccountsChanged = accounts => {\n    if (accounts.length === 0) {\n      disconnectWallet();\n    } else {\n      setAccount(accounts[0]);\n    }\n  };\n  const handleChainChanged = chainId => {\n    setChainId(chainId);\n    window.location.reload(); // Reload to reset state\n  };\n  const connectWallet = async () => {\n    if (typeof window.ethereum === 'undefined') {\n      setError('MetaMask is not installed. Please install MetaMask to continue.');\n      return;\n    }\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Request account access\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      if (accounts.length === 0) {\n        throw new Error('No accounts found');\n      }\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const network = await provider.getNetwork();\n      setProvider(provider);\n      setSigner(signer);\n      setAccount(accounts[0]);\n      setChainId('0x' + network.chainId.toString(16));\n\n      // Check if we're on the correct network\n      if (network.chainId !== parseInt(BASE_CHAIN_ID, 16)) {\n        await switchToBaseNetwork();\n      }\n    } catch (error) {\n      console.error('Error connecting wallet:', error);\n      setError(error.message || 'Failed to connect wallet');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const switchToBaseNetwork = async () => {\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{\n          chainId: BASE_CHAIN_ID\n        }]\n      });\n    } catch (switchError) {\n      // If the chain hasn't been added to MetaMask, add it\n      if (switchError.code === 4902) {\n        try {\n          await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [{\n              chainId: BASE_CHAIN_ID,\n              chainName: 'Base',\n              nativeCurrency: {\n                name: 'Ethereum',\n                symbol: 'ETH',\n                decimals: 18\n              },\n              rpcUrls: [BASE_RPC_URL],\n              blockExplorerUrls: ['https://basescan.org/']\n            }]\n          });\n        } catch (addError) {\n          console.error('Error adding Base network:', addError);\n          setError('Failed to add Base network to MetaMask');\n        }\n      } else {\n        console.error('Error switching to Base network:', switchError);\n        setError('Failed to switch to Base network');\n      }\n    }\n  };\n  const disconnectWallet = () => {\n    setProvider(null);\n    setSigner(null);\n    setAccount(null);\n    setChainId(null);\n    setError(null);\n  };\n  const isConnectedToBase = () => {\n    return chainId === BASE_CHAIN_ID;\n  };\n  const value = {\n    provider,\n    signer,\n    account,\n    chainId,\n    loading,\n    error,\n    connectWallet,\n    disconnectWallet,\n    switchToBaseNetwork,\n    isConnectedToBase,\n    isConnected: !!account\n  };\n  return /*#__PURE__*/_jsxDEV(Web3Context.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 10\n  }, this);\n};\n_s2(Web3Provider, \"yPHLsCtTOH5rtLFFtrVx8JEiWZ8=\");\n_c = Web3Provider;\nvar _c;\n$RefreshReg$(_c, \"Web3Provider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","ethers","jsxDEV","_jsxDEV","Web3Context","useWeb3","_s","context","Error","Web3Provider","children","_s2","provider","setProvider","signer","setSigner","account","setAccount","chainId","setChainId","loading","setLoading","error","setError","BASE_CHAIN_ID","BASE_RPC_URL","checkWalletConnection","setupEventListeners","window","ethereum","accounts","request","method","length","connectWallet","console","on","handleAccountsChanged","handleChainChanged","disconnectWallet","location","reload","providers","getSigner","network","getNetwork","toString","parseInt","switchToBaseNetwork","message","params","switchError","code","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","addError","isConnectedToBase","value","isConnected","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/CampusBite/Desktop/educhain/frontend/src/contexts/Web3Context.js"],"sourcesContent":["// contexts/Web3Context.js\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { ethers } from 'ethers';\r\n\r\nconst Web3Context = createContext();\r\n\r\nexport const useWeb3 = () => {\r\n  const context = useContext(Web3Context);\r\n  if (!context) {\r\n    throw new Error('useWeb3 must be used within a Web3Provider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const Web3Provider = ({ children }) => {\r\n  const [provider, setProvider] = useState(null);\r\n  const [signer, setSigner] = useState(null);\r\n  const [account, setAccount] = useState(null);\r\n  const [chainId, setChainId] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Base blockchain configuration\r\n  const BASE_CHAIN_ID = '0x2105'; // Base mainnet\r\n  const BASE_RPC_URL = 'https://mainnet.base.org';\r\n\r\n  useEffect(() => {\r\n    checkWalletConnection();\r\n    setupEventListeners();\r\n  }, []);\r\n\r\n  const checkWalletConnection = async () => {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      try {\r\n        const accounts = await window.ethereum.request({ method: 'eth_accounts' });\r\n        if (accounts.length > 0) {\r\n          await connectWallet();\r\n        }\r\n      } catch (error) {\r\n        console.error('Error checking wallet connection:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const setupEventListeners = () => {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\r\n      window.ethereum.on('chainChanged', handleChainChanged);\r\n    }\r\n  };\r\n\r\n  const handleAccountsChanged = (accounts) => {\r\n    if (accounts.length === 0) {\r\n      disconnectWallet();\r\n    } else {\r\n      setAccount(accounts[0]);\r\n    }\r\n  };\r\n\r\n  const handleChainChanged = (chainId) => {\r\n    setChainId(chainId);\r\n    window.location.reload(); // Reload to reset state\r\n  };\r\n\r\n  const connectWallet = async () => {\r\n    if (typeof window.ethereum === 'undefined') {\r\n      setError('MetaMask is not installed. Please install MetaMask to continue.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      // Request account access\r\n      const accounts = await window.ethereum.request({\r\n        method: 'eth_requestAccounts',\r\n      });\r\n\r\n      if (accounts.length === 0) {\r\n        throw new Error('No accounts found');\r\n      }\r\n\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n      const signer = provider.getSigner();\r\n      const network = await provider.getNetwork();\r\n\r\n      setProvider(provider);\r\n      setSigner(signer);\r\n      setAccount(accounts[0]);\r\n      setChainId('0x' + network.chainId.toString(16));\r\n\r\n      // Check if we're on the correct network\r\n      if (network.chainId !== parseInt(BASE_CHAIN_ID, 16)) {\r\n        await switchToBaseNetwork();\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Error connecting wallet:', error);\r\n      setError(error.message || 'Failed to connect wallet');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const switchToBaseNetwork = async () => {\r\n    try {\r\n      await window.ethereum.request({\r\n        method: 'wallet_switchEthereumChain',\r\n        params: [{ chainId: BASE_CHAIN_ID }],\r\n      });\r\n    } catch (switchError) {\r\n      // If the chain hasn't been added to MetaMask, add it\r\n      if (switchError.code === 4902) {\r\n        try {\r\n          await window.ethereum.request({\r\n            method: 'wallet_addEthereumChain',\r\n            params: [{\r\n              chainId: BASE_CHAIN_ID,\r\n              chainName: 'Base',\r\n              nativeCurrency: {\r\n                name: 'Ethereum',\r\n                symbol: 'ETH',\r\n                decimals: 18,\r\n              },\r\n              rpcUrls: [BASE_RPC_URL],\r\n              blockExplorerUrls: ['https://basescan.org/'],\r\n            }],\r\n          });\r\n        } catch (addError) {\r\n          console.error('Error adding Base network:', addError);\r\n          setError('Failed to add Base network to MetaMask');\r\n        }\r\n      } else {\r\n        console.error('Error switching to Base network:', switchError);\r\n        setError('Failed to switch to Base network');\r\n      }\r\n    }\r\n  };\r\n\r\n  const disconnectWallet = () => {\r\n    setProvider(null);\r\n    setSigner(null);\r\n    setAccount(null);\r\n    setChainId(null);\r\n    setError(null);\r\n  };\r\n\r\n  const isConnectedToBase = () => {\r\n    return chainId === BASE_CHAIN_ID;\r\n  };\r\n\r\n  const value = {\r\n    provider,\r\n    signer,\r\n    account,\r\n    chainId,\r\n    loading,\r\n    error,\r\n    connectWallet,\r\n    disconnectWallet,\r\n    switchToBaseNetwork,\r\n    isConnectedToBase,\r\n    isConnected: !!account\r\n  };\r\n\r\n  return <Web3Context.Provider value={value}>{children}</Web3Context.Provider>;\r\n};\r\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,MAAM,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMQ,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGT,UAAU,CAACM,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAQpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACe,MAAM,EAAEC,SAAS,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACmB,OAAO,EAAEC,UAAU,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACqB,OAAO,EAAEC,UAAU,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACuB,KAAK,EAAEC,QAAQ,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACA,MAAMyB,aAAa,GAAG,QAAQ,CAAC,CAAC;EAChC,MAAMC,YAAY,GAAG,0BAA0B;EAE/CzB,SAAS,CAAC,MAAM;IACd0B,qBAAqB,CAAC,CAAC;IACvBC,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMD,qBAAqB,GAAG,MAAAA,CAAA,KAAY;IACxC,IAAI,OAAOE,MAAM,CAACC,QAAQ,KAAK,WAAW,EAAE;MAC1C,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;UAAEC,MAAM,EAAE;QAAe,CAAC,CAAC;QAC1E,IAAIF,QAAQ,CAACG,MAAM,GAAG,CAAC,EAAE;UACvB,MAAMC,aAAa,CAAC,CAAC;QACvB;MACF,CAAC,CAAC,OAAOZ,KAAK,EAAE;QACda,OAAO,CAACb,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MAC3D;IACF;EACF,CAAC;EAED,MAAMK,mBAAmB,GAAGA,CAAA,KAAM;IAChC,IAAI,OAAOC,MAAM,CAACC,QAAQ,KAAK,WAAW,EAAE;MAC1CD,MAAM,CAACC,QAAQ,CAACO,EAAE,CAAC,iBAAiB,EAAEC,qBAAqB,CAAC;MAC5DT,MAAM,CAACC,QAAQ,CAACO,EAAE,CAAC,cAAc,EAAEE,kBAAkB,CAAC;IACxD;EACF,CAAC;EAED,MAAMD,qBAAqB,GAAIP,QAAQ,IAAK;IAC1C,IAAIA,QAAQ,CAACG,MAAM,KAAK,CAAC,EAAE;MACzBM,gBAAgB,CAAC,CAAC;IACpB,CAAC,MAAM;MACLtB,UAAU,CAACa,QAAQ,CAAC,CAAC,CAAC,CAAC;IACzB;EACF,CAAC;EAED,MAAMQ,kBAAkB,GAAIpB,OAAO,IAAK;IACtCC,UAAU,CAACD,OAAO,CAAC;IACnBU,MAAM,CAACY,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC;EAC5B,CAAC;EAED,MAAMP,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI,OAAON,MAAM,CAACC,QAAQ,KAAK,WAAW,EAAE;MAC1CN,QAAQ,CAAC,iEAAiE,CAAC;MAC3E;IACF;IAEA,IAAI;MACFF,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;;MAEd;MACA,MAAMO,QAAQ,GAAG,MAAMF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;QAC7CC,MAAM,EAAE;MACV,CAAC,CAAC;MAEF,IAAIF,QAAQ,CAACG,MAAM,KAAK,CAAC,EAAE;QACzB,MAAM,IAAIzB,KAAK,CAAC,mBAAmB,CAAC;MACtC;MAEA,MAAMI,QAAQ,GAAG,IAAIX,MAAM,CAACyC,SAAS,CAACjC,YAAY,CAACmB,MAAM,CAACC,QAAQ,CAAC;MACnE,MAAMf,MAAM,GAAGF,QAAQ,CAAC+B,SAAS,CAAC,CAAC;MACnC,MAAMC,OAAO,GAAG,MAAMhC,QAAQ,CAACiC,UAAU,CAAC,CAAC;MAE3ChC,WAAW,CAACD,QAAQ,CAAC;MACrBG,SAAS,CAACD,MAAM,CAAC;MACjBG,UAAU,CAACa,QAAQ,CAAC,CAAC,CAAC,CAAC;MACvBX,UAAU,CAAC,IAAI,GAAGyB,OAAO,CAAC1B,OAAO,CAAC4B,QAAQ,CAAC,EAAE,CAAC,CAAC;;MAE/C;MACA,IAAIF,OAAO,CAAC1B,OAAO,KAAK6B,QAAQ,CAACvB,aAAa,EAAE,EAAE,CAAC,EAAE;QACnD,MAAMwB,mBAAmB,CAAC,CAAC;MAC7B;IAEF,CAAC,CAAC,OAAO1B,KAAK,EAAE;MACda,OAAO,CAACb,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChDC,QAAQ,CAACD,KAAK,CAAC2B,OAAO,IAAI,0BAA0B,CAAC;IACvD,CAAC,SAAS;MACR5B,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAM2B,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAI;MACF,MAAMpB,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;QAC5BC,MAAM,EAAE,4BAA4B;QACpCkB,MAAM,EAAE,CAAC;UAAEhC,OAAO,EAAEM;QAAc,CAAC;MACrC,CAAC,CAAC;IACJ,CAAC,CAAC,OAAO2B,WAAW,EAAE;MACpB;MACA,IAAIA,WAAW,CAACC,IAAI,KAAK,IAAI,EAAE;QAC7B,IAAI;UACF,MAAMxB,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;YAC5BC,MAAM,EAAE,yBAAyB;YACjCkB,MAAM,EAAE,CAAC;cACPhC,OAAO,EAAEM,aAAa;cACtB6B,SAAS,EAAE,MAAM;cACjBC,cAAc,EAAE;gBACdC,IAAI,EAAE,UAAU;gBAChBC,MAAM,EAAE,KAAK;gBACbC,QAAQ,EAAE;cACZ,CAAC;cACDC,OAAO,EAAE,CAACjC,YAAY,CAAC;cACvBkC,iBAAiB,EAAE,CAAC,uBAAuB;YAC7C,CAAC;UACH,CAAC,CAAC;QACJ,CAAC,CAAC,OAAOC,QAAQ,EAAE;UACjBzB,OAAO,CAACb,KAAK,CAAC,4BAA4B,EAAEsC,QAAQ,CAAC;UACrDrC,QAAQ,CAAC,wCAAwC,CAAC;QACpD;MACF,CAAC,MAAM;QACLY,OAAO,CAACb,KAAK,CAAC,kCAAkC,EAAE6B,WAAW,CAAC;QAC9D5B,QAAQ,CAAC,kCAAkC,CAAC;MAC9C;IACF;EACF,CAAC;EAED,MAAMgB,gBAAgB,GAAGA,CAAA,KAAM;IAC7B1B,WAAW,CAAC,IAAI,CAAC;IACjBE,SAAS,CAAC,IAAI,CAAC;IACfE,UAAU,CAAC,IAAI,CAAC;IAChBE,UAAU,CAAC,IAAI,CAAC;IAChBI,QAAQ,CAAC,IAAI,CAAC;EAChB,CAAC;EAED,MAAMsC,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,OAAO3C,OAAO,KAAKM,aAAa;EAClC,CAAC;EAED,MAAMsC,KAAK,GAAG;IACZlD,QAAQ;IACRE,MAAM;IACNE,OAAO;IACPE,OAAO;IACPE,OAAO;IACPE,KAAK;IACLY,aAAa;IACbK,gBAAgB;IAChBS,mBAAmB;IACnBa,iBAAiB;IACjBE,WAAW,EAAE,CAAC,CAAC/C;EACjB,CAAC;EAED,oBAAOb,OAAA,CAACC,WAAW,CAAC4D,QAAQ;IAACF,KAAK,EAAEA,KAAM;IAAApD,QAAA,EAAEA;EAAQ;IAAAuD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAC9E,CAAC;AAACzD,GAAA,CAzJWF,YAAY;AAAA4D,EAAA,GAAZ5D,YAAY;AAAA,IAAA4D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}